
---------------------
mysql不支持全外连接需要模拟左右并且去重才可以
SELECT * from user u  FULL OUTER JOIN orders o ON u.id=o.uid;

SELECT u.*,o.id as oid,goodsName,address from user u left JOIN orders o on u.id=o.uid UNION SELECT u.*,o.id as oid,goodsName,address from user u right JOIN orders o on u.id=o.uid;
---------------------

Explain sql;

id-----
id相同，执行顺序由上至下图
id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行
id相同不同，同时存在(依据上面策略执行)

select_type-----
SIMPLE:简单的select查询，查询中不包括子查询或者union

PRIMARY: 查询中若包括任何复杂的子部分 最外层被标记为此类型

SUBQUERY:在SELECT 或 WHERE 列表中包括了子查询

DERIVED: 衍生  在FROM列表中包含的子查询被标记为此类型 Mysql会递归执行这些子查询 并把结果放在临时表里      select * from (select id from user) u;

UNION:若第二个SELECT出现在union之后 则被标记为union 若union包含在FROM子句的子查询中 外层SELECT将被标记为DERIVED

UNION RESULT: 从union表获取结果的SELECT

type-----
system>const>eq_ref>ref>range>index>all

possible_keys-----
显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用
key-----
实际使用的索引。如果为NULL，则没有使用索引，查询中若使用了覆盖索引，则该索引仅出现在key列表中

key_len-----
表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好
key_ len显 示的值为索引字段的最大可能长度，并非实际使用长度，即key_ len是 根据表定义计算而得，不是通过表内检索出的

ref----
显示索引的哪一列被使用了， 如果可能的话，是-一个常数。哪些列或常量被用于查找索引列上的值

rows-----
根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数图

extra----
1. Using filesort(出现这个就完蛋 效率极低 千万避免)
说明mysq|会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。MySQL中无法利用索引完成的排序操作称为“文件排序”
2. Using temporary
使了用临时表保存中间结果,MySQL在对查询结果排序时使用临时表。常见于排序orderby和分组查询groupby。

3.Using index
表示相应的select操作中使用了覆盖索引(Covering Index)， 避免访问了表的数据行，效率不错!
如果同时出现usingwhere,表明索引被用来执行索引键值的查找;
如果没有同时出现usingwhere，表明索引用来读取数据而非执行查找动作。
4.Using where
表示使用了where过滤
5.Using join buffer
使用了连接缓存

当出现> < 类似的范围时 范围后面的索引会失效 导致sql效率下降 可以通过创建去掉范围字段的索引解决
列如：查询浏览量大于1的最高浏览量文章
 EXPLAIN SELECT * FROM article WHERE category_id=1 and comments>1 ORDER BY views  DESC LIMIT 1;
 create index idx_article_ccv on article(category_id,comments,views);
 drop index idx_article_ccv on article;
 create index idx_article_cv on article(category_id,views);

left join 左连接时索引建立在右表
right join 右连接时索引建立在左表

explain select * from user u left join orders o on u.address=o.address;
应该在orders表建立索引


explain select * from user u right join orders o on u.address=o.address;
应该在user表建立索引



1.全值匹配我最爱
2.最佳左前缀法则 比如 name num phone --- name, name num,name num phone 可以索引 其他不行
3.不在索引列上做任何操作(计算、函数、(自动or手动)类型转换)，会导致索引失效而转向全表扫描
4.存储引擎不能使用索引中范围条件右边的列  ，范围右边全失效 
5.尽量使用覆盖索引(只访问索引的查询(索引列和查询列- -致))， 减少select *
6. mysql在使用不等于(!=或者<> )的时候无法使用索引会导致全表扫描
7.isnull,is not null也无法使用索引
8.like以通配符开头('%abe...')mysq|索引失效会变成全表扫描的操作
问题:解决like"%字符串%"时索引不被使用的方法 ---使用覆盖索引
9.字符串不加单引号索引失效
10.少用or,用它来连接时会索引失效

联合索引建立c1 c2 c3 c4 ----
select * from test03 where c1= 'c1'and c2= 'a2' and c4= 'a4' order by c3;
索引实际用了 c1 c2 其实c3也用了 只不过是用于排序 explain不显示

select * from test03 where c1= 'c1'and c2= 'a2' order by c4;
索引实际用了c1 c2， 但是出现Using filesort 因为mysql by c4 跳过了c3 产生了内排序 导致性能下降

select * from test03 where c1= 'c1'and c2= 'a2' order by c3,c4;
索引实际用了c1 c2 ， c3 c4 用于排序

select * from test03 where c1= 'c1'and c2= 'a2' order by c4,c3;
索引实际用了c1 c2，相对上面产生了 Using filesort 因为c4 c3 顺序反了

select * from test03 where c1= 'c1'and c2= 'a2' order by c3,c2;
索引实际用了c1 c2，不会产生Usingsort 因为条件c2 已经是常量了

group by基本上都要排序 会产生临时表 一定要按索引顺序！
例如
select ......   group  c1,c3  改成c1,c2,c3
select ......   group c3  改成c1,c2,c3