mysql 5.7 新特性 加入了JSON类型的字段

insert into user values (null,'{"name":"David","address":"Shanghai","tel":189776542}');
insert into user (msg) value ('{"name":"DavidTaoZhe","address":"Shanghai","tel":189776542}');
向user表中添加信息  包括JSON字符串 msg字段为JSON数据

INSERT INTO user(msg) VALUES(JSON_OBJECT("sex", 1, "age", 17));

向user表中添加信息  输入的非JSON字符串通过JSON_OBJECT方法转换为JSON数据

INSERT INTO user(msg) VALUES(JSON_OBJECT("sex", 1, "age", 19, "tag", JSON_ARRAY('s',5,90)));
tag为JSON数组

使用JSON_INSERT()插入新值，但不会覆盖已经存在的值
UPDATE user SET info = JSON_INSERT(info, '$.sex', 1, '$.nick_name', '小花') where id=2;

使用JSON_SET()插入新值，并覆盖已经存在的值
update user set msg= json_set(msg,"$.address","Guangzhou") where id = 2;
修改user表 msg列（JSON类型）中的address属性值 更新为Guangzhou
当没有address属性时 会添加address属性

使用JSON_REPLACE()只替换存在的值
UPDATE user SET info = JSON_REPLACE(info, '$.sex', 1, '$.tag', '[1,2,3]') where id=2;

{"tel": "Guangzhou", "name": "Mike", "address": "Beijing"}
{"sex": "男", "tel": "Guangzhou", "name": "Mike", "address": "Beijing"}


使用JSON_REMOVE()删除JSON元素
UPDATE user SET info = JSON_REMOVE(info, '$.sex', '$.tag') where id=1;