// ArrayList无参构造函数。默认容量是10。    
    public ArrayList() {    
        this(10);    
    }    


ArrayList是基于数组实现的，是一个动态数组，其容量能自动增长，类似于C语言中的动态申请内存，动态增长内存。

    ArrayList不是线程安全的，只能用在单线程环境下，多线程环境下可以考虑用Collections.synchronizedList(List l)函数返回一个线程安全的ArrayList类，也可以使用concurrent并发包下的CopyOnWriteArrayList类。

    ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了RandomAccess接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了Cloneable接口，能被克隆。

   每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。它总是至少等于列表的大小。随着向ArrayList中不断添加元素，其容量也自动增长。自动增长会带来数据向新数组的重新拷贝，因此，如果可预知数据量的多少，可在构造ArrayList时指定其容量。在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。 
   注意，此实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。

if (minCapacity - elementData.length > 0)
            grow(minCapacity);
通过这个地方是真正的增加长度，当需要的长度大于原来数组长度的时候就需要扩容了，相反的则不需要扩容


List扩容实现步骤
         总的来说就是分两步：
			1、扩容
                                              把原来的数组复制到另一个内存空间更大的数组中
                                                2、添加元素

                                               把新元素添加到扩容以后的数组中


ArrayList的优点

ArrayList底层以数组实现，是一种随机访问模式，再加上它实现了RandomAccess接口，因此查找也就是get的时候非常快。
ArrayList在顺序添加一个元素的时候非常方便，只是往数组里面添加了一个元素而已。
根据下标遍历元素，效率高。
根据下标访问元素，效率高。
可以自动扩容，默认为每次扩容为原来的1.5倍。

ArrayList的缺点

插入和删除元素的效率不高。
根据元素下标查找元素需要遍历整个元素数组，效率不高。
线程不安全。


（1）ArrayList：

 优点：操作读取操作效率高，基于数组实现的，可以为null值，可以允许重复元素，有序，异步。
 缺点：由于它是由动态数组实现的，不适合频繁的对元素的插入和删除操作，因为每次插入和删除都需  要移动数组中的元素。
（2）LinkedList:

优点：LinkedList由双向链表实现，增删由于不需要移动底层数组数据，其底层是链表实现的，只需要修改链表节点指针，对元素的插入和删除效率较高。
缺点： 遍历效率较低。HashMap和双链表也有关系。




ArrayList
 
ArrayList默认容量是10

ArrayList最大容量Integer.MAX_VALUE - 8
ArrayList扩容机制，按原数组长度的1.5倍扩容。
如果扩容后的大小小于实际需要的大小，将数组扩大到实际需要的大小



CopyOnWriteArrayList
   CopyOnWriteArrayList是线程同步的数组集合。
CopyOnWriteArrayList使用场景主要是多线程环境下，查询、遍历操作明显多于增加、删除操作。
- CopyOnWriteArrayList默认容量是0，从0开始
- 
CopyOnWriteArrayList没有规定最大容量(适合在查询操作频繁的场景下使用，容量变化不大)
- CopyOnWriteArrayList扩容机制，每次+1



LinkedList
LinkedList是用双链表实现的。对容量没有要求，也不需要扩容
