DOM解析

　　DOM的全称是Document Object Model，也即文档对象模型。在应用程序中，基于DOM的XML分析器将一个XML文档转换成一个对象模型的集合（通常称DOM树），应用程序正是通过对这个对象模型的操作，来实现对XML文档数据的操作。通过DOM接口，应用程序可以在任何时候访问XML文档中的任何一部分数据，因此，这种利用DOM接口的机制也被称作随机访问机制。

　　DOM接口提供了一种通过分层对象模型来访问XML文档信息的方式，这些分层对象模型依据XML的文档结构形成了一棵节点树。无论XML文档中所描述的是什么类型的信息，即便是制表数据、项目列表或一个文档，利用DOM所生成的模型都是节点树的形式。也就是说，DOM强制使用树模型来访问XML文档中的信息。由于XML本质上就是一种分层结构，所以这种描述方法是相当有效的。

　　DOM树所提供的随机访问方式给应用程序的开发带来了很大的灵活性，它可以任意地控制整个XML文档中的内容。然而，由于DOM分析器把整个XML文档转化成DOM树放在了内存中，因此，当文档比较大或者结构比较复杂时，对内存的需求就比较高。而且，对于结构复杂的树的遍历也是一项耗时的操作。所以，DOM分析器对机器性能的要求比较高，实现效率不十分理想。不过，由于DOM分析器所采用的树结构的思想与XML文档的结构相吻合，同时鉴于随机访问所带来的方便，因此，DOM分析器还是有很广泛的使用价值的。

　　　　优点：

　　　　　　1、形成了树结构，有助于更好的理解、掌握，且代码容易编写。

　　　　　　2、解析过程中，树结构保存在内存中，方便修改。

　　　　缺点：

　　　　　　1、由于文件是一次性读取，所以对内存的耗费比较大。

　　　　　　2、如果XML文件比较大，容易影响解析性能且可能会造成内存溢出。

　　以下是解析代码：


 

二、SAX解析

　　SAX的全称是Simple APIs for XML，也即XML简单应用程序接口。与DOM不同，SAX提供的访问模式是一种顺序模式，这是一种快速读写XML数据的方式。当使用SAX分析器对XML文档进行分析时，会触发一系列事件，并激活相应的事件处理函数，应用程序通过这些事件处理函数实现对XML文档的访问，因而SAX接口也被称作事件驱动接口。

　　　　优点：

　　　　　　1、采用事件驱动模式，对内存耗费比较小。

　　　　　　2、适用于只处理XML文件中的数据时。

　　　　缺点：

　　　　　　1、编码比较麻烦。

　　　　　　2、很难同时访问XML文件中的多处不同数据。

**********   使用dom4j 解析xml (最常用) 虽然jdk自带有dom 工厂 但是dom4j 更强大且使用简单 引入jar即可


xml文件:

<?xml version="1.0" encoding="UTF-8"?>

<books>

   <book id="001">

      <title>Harry Potter</title>

      <author>J K. Rowling</author>

   </book>

   <book id="002">

      <title>Learning XML</title>

      <author>Erik T. Ray</author>

   </book>

</books>

示例一：用List列表的方式来解析xml

SAXReader就是一个管道，用一个流的方式，把xml文件读出来


import java.io.File;

import java.util.List;

  

import org.dom4j.Attribute;

import org.dom4j.Document;

import org.dom4j.Element;

import org.dom4j.io.SAXReader;

  

  

  

public class Demo {

  

    public static void main(String[] args) throws Exception {

        SAXReader reader = new SAXReader();

        File file = new File("books.xml");

        Document document = reader.read(file);

        Element root = document.getRootElement();

        List<Element> childElements = root.elements();

        for (Element child : childElements) {

            //未知属性名情况下

            /*List<Attribute> attributeList = child.attributes();

            for (Attribute attr : attributeList) {

                System.out.println(attr.getName() + ": " + attr.getValue());

            }*/

              

            //已知属性名情况下

            System.out.println("id: " + child.attributeValue("id"));

              

            //未知子元素名情况下

            /*List<Element> elementList = child.elements();

            for (Element ele : elementList) {

                System.out.println(ele.getName() + ": " + ele.getText());

            }

            System.out.println();*/

              

            //已知子元素名的情况下

            System.out.println("title" + child.elementText("title"));

            System.out.println("author" + child.elementText("author"));

            //这行是为了格式化美观而存在

            System.out.println();

        }

    }

  

}

示例二：使用Iterator迭代器的方式来解析xml


import java.io.File;

import java.util.Iterator;

  

import org.dom4j.Attribute;

import org.dom4j.Document;

import org.dom4j.Element;

import org.dom4j.io.SAXReader;

  

  

  

public class Demo {

    public static void main(String[] args) throws Exception {

        SAXReader reader = new SAXReader();

        Document document = reader.read(new File("books.xml"));

        Element root = document.getRootElement();

          

        Iterator it = root.elementIterator();

        while (it.hasNext()) {

            Element element = (Element) it.next();

              

            //未知属性名称情况下

            /*Iterator attrIt = element.attributeIterator();

            while (attrIt.hasNext()) {

                Attribute a  = (Attribute) attrIt.next();

                System.out.println(a.getValue());

            }*/

              

            //已知属性名称情况下

            System.out.println("id: " + element.attributeValue("id"));

              

            //未知元素名情况下

            /*Iterator eleIt = element.elementIterator();

            while (eleIt.hasNext()) {

                Element e = (Element) eleIt.next();

                System.out.println(e.getName() + ": " + e.getText());

            }

            System.out.println();*/

              

            //已知元素名情况下

            System.out.println("title: " + element.elementText("title"));

            System.out.println("author: " + element.elementText("author"));

            System.out.println();

        }

    }

}





 示例三：创建xml文档并输出到文件



import java.io.File;

import java.io.FileOutputStream;

  

import org.dom4j.Document;

import org.dom4j.DocumentHelper;

import org.dom4j.Element;

import org.dom4j.io.OutputFormat;

import org.dom4j.io.XMLWriter;

  

  

public class Demo {

    public static void main(String[] args) throws Exception {

        Document doc = DocumentHelper.createDocument();

        //增加根节点

        Element books = doc.addElement("books");

        //增加子元素

        Element book1 = books.addElement("book");

        Element title1 = book1.addElement("title");

        Element author1 = book1.addElement("author");

          

        Element book2 = books.addElement("book");

        Element title2 = book2.addElement("title");

        Element author2 = book2.addElement("author");

          

        //为子节点添加属性

        book1.addAttribute("id", "001");

        //为元素添加内容

        title1.setText("Harry Potter");

        author1.setText("J K. Rowling");

          

        book2.addAttribute("id", "002");

        title2.setText("Learning XML");

        author2.setText("Erik T. Ray");

          

        //实例化输出格式对象

        OutputFormat format = OutputFormat.createPrettyPrint();

        //设置输出编码

        format.setEncoding("UTF-8");

        //创建需要写入的File对象

        File file = new File("D:" + File.separator + "books.xml");

        //生成XMLWriter对象，构造函数中的参数为需要输出的文件流和格式

        XMLWriter writer = new XMLWriter(new FileOutputStream(file), format);

        //开始写入，write方法中包含上面创建的Document对象

        writer.write(doc);

    }

}






 
使用Jsoup解析xml   也是一种方法 不常用 主要解析html 
***   a.xml为resources下的文件（springboot）
       //解析
        Document document = null;
        try {
            document = Jsoup.parse(ResourceUtils.getFile("classpath:a.xml"), "utf-8");
        } catch (IOException e) {
            e.printStackTrace();
        }
        //获取元素
        Elements elements = document.getElementsByTag("name");
        
        //获取数据
        for (int i = 0; i < elements.size(); i++) {
            System.out.println(elements.get(i).text());
        }


构造方法 支持file string 网络url xml文件
public static Document parse(File in,String charsetName)throws IOException
 public static Document parse(String html)
public static Document parse(URL url,int timeoutMillis)throws IOException
